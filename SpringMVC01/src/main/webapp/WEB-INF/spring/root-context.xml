<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd">
	
	
	<!-- MyBatis SqlSessionFactory 커넥션풀 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- SqlSessionFactoryBean클래스에 dataSource(driverClass,url...등)정보를 주기. -->
		<property name="dataSource" ref="dataSource" />
		
		<!-- SQL쿼리문 config.xml파일의 설정을 대신해주기 때문에 config.xml파일에서 더이상 필요X -->
		<property name="configLocation" value="/WEB-INF/mybatis/config.xml" />
		
		<!-- kr.bit.mybatis의 memberMapper.xml파일을 찾아가기. 이때 classpath:을 사용하여 찾기. -->
		<property name="mapperLocations" value="classpath:kr.bit.mybatis/*.xml" /> 
		
		
	</bean>
	
	
	<!-- JDBC연결(DataSource) db.properties와 내부적으로 연동.-->
	<bean id="dataSource" class="org.springframework.jdbc.datasource.SimpleDriverDataSource">
		<property name="driverClass" value="${driver}" /><!-- db.properties의 driver -->
		<property name="url" value="${url}" />
		<property name="username" value="${username}" />
		<property name="password" value="${password}" />
		
	</bean>
	
	
	
	<!-- WEB-INF폴더의 myBatis폴더의 db.propertis를 연동. -->
	<!-- Root Context: defines shared resources visible to all other web components -->
	
	
	<!-- db.properties 파일 연결 Spring에서는 root-context 파일에서 대부분 DB설정.  -->	
	<!-- java에서는 bean을 이용해서 일반적인 객체생성과는 다르게 클래스를 이용할 수 있다. -->
	<!-- 따라서 Spring의 xml파일에서도 마찬가지로 클래스를 사용할 수 있게 beans태그를 이용해서 api를 설정해줄 수 있다. -->
	<!-- 라이브러리에서 원하는 클래스(스프링과 db를 연결)를 가져와서 객체화 시키기. db.properties 파일 연결-->	
	<bean id="propertyPlaceholderConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<!-- propertyPlaceholderConfigurer클래스가 작동을 하려면 값이 필요한데 클래스안에 locations에 value의 경로를 설정하여 값을 준것. -->
		<!-- setLocations(db.properties의 값) 메서드호출. 값 지정. -->
		<property name="locations" value="/WEB-INF/mybatis/db.properties"/>
	
	
	</bean>
		
		
</beans>
